/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UploadDatasetRequest
 */
export interface UploadDatasetRequest {
    /**
     * Name of the dataset
     * @type {string}
     * @memberof UploadDatasetRequest
     */
    name: string;
    /**
     * Description of the dataset
     * @type {string}
     * @memberof UploadDatasetRequest
     */
    description?: string;
    /**
     * ID of the ingest process
     * @type {string}
     * @memberof UploadDatasetRequest
     */
    processId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UploadDatasetRequest
     */
    expectedFiles: Array<string>;
}

/**
 * Check if a given object implements the UploadDatasetRequest interface.
 */
export function instanceOfUploadDatasetRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "processId" in value;
    isInstance = isInstance && "expectedFiles" in value;

    return isInstance;
}

export function UploadDatasetRequestFromJSON(json: any): UploadDatasetRequest {
    return UploadDatasetRequestFromJSONTyped(json, false);
}

export function UploadDatasetRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadDatasetRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'processId': json['processId'],
        'expectedFiles': json['expectedFiles'],
    };
}

export function UploadDatasetRequestToJSON(value?: UploadDatasetRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'processId': value.processId,
        'expectedFiles': value.expectedFiles,
    };
}

