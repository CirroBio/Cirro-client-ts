/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomPipelineSettings } from './CustomPipelineSettings';
import {
    CustomPipelineSettingsFromJSON,
    CustomPipelineSettingsFromJSONTyped,
    CustomPipelineSettingsToJSON,
} from './CustomPipelineSettings';
import type { Executor } from './Executor';
import {
    ExecutorFromJSON,
    ExecutorFromJSONTyped,
    ExecutorToJSON,
} from './Executor';
import type { FileMappingRule } from './FileMappingRule';
import {
    FileMappingRuleFromJSON,
    FileMappingRuleFromJSONTyped,
    FileMappingRuleToJSON,
} from './FileMappingRule';
import type { PipelineCode } from './PipelineCode';
import {
    PipelineCodeFromJSON,
    PipelineCodeFromJSONTyped,
    PipelineCodeToJSON,
} from './PipelineCode';

/**
 * 
 * @export
 * @interface CustomProcessInput
 */
export interface CustomProcessInput {
    /**
     * Unique ID of the Process
     * @type {string}
     * @memberof CustomProcessInput
     */
    id: string;
    /**
     * Friendly name for the process
     * @type {string}
     * @memberof CustomProcessInput
     */
    name: string;
    /**
     * Description of the process
     * @type {string}
     * @memberof CustomProcessInput
     */
    description: string;
    /**
     * Name of the data type this pipeline produces (if it is not defined, use the name)
     * @type {string}
     * @memberof CustomProcessInput
     */
    dataType?: string | null;
    /**
     * 
     * @type {Executor}
     * @memberof CustomProcessInput
     */
    executor: Executor;
    /**
     * Category of the process
     * @type {string}
     * @memberof CustomProcessInput
     */
    category?: string;
    /**
     * IDs of pipelines that can be run downstream
     * @type {Array<string>}
     * @memberof CustomProcessInput
     */
    childProcessIds: Array<string>;
    /**
     * IDs of processes that can run this pipeline
     * @type {Array<string>}
     * @memberof CustomProcessInput
     */
    parentProcessIds: Array<string>;
    /**
     * Link to process documentation
     * @type {string}
     * @memberof CustomProcessInput
     */
    documentationUrl?: string | null;
    /**
     * Description of the files to be uploaded (optional)
     * @type {string}
     * @memberof CustomProcessInput
     */
    fileRequirementsMessage?: string | null;
    /**
     * 
     * @type {PipelineCode}
     * @memberof CustomProcessInput
     */
    pipelineCode?: PipelineCode | null;
    /**
     * Projects that can run this process
     * @type {Array<string>}
     * @memberof CustomProcessInput
     */
    linkedProjectIds: Array<string>;
    /**
     * Whether the process is shared with the tenant
     * @type {boolean}
     * @memberof CustomProcessInput
     */
    isTenantWide?: boolean;
    /**
     * Whether the pipeline is allowed to have multiple dataset sources
     * @type {boolean}
     * @memberof CustomProcessInput
     */
    allowMultipleSources?: boolean;
    /**
     * Whether the pipeline uses the Cirro-provided sample sheet
     * @type {boolean}
     * @memberof CustomProcessInput
     */
    usesSampleSheet?: boolean;
    /**
     * 
     * @type {CustomPipelineSettings}
     * @memberof CustomProcessInput
     */
    customSettings?: CustomPipelineSettings | null;
    /**
     * 
     * @type {Array<FileMappingRule>}
     * @memberof CustomProcessInput
     */
    fileMappingRules?: Array<FileMappingRule> | null;
}

/**
 * Check if a given object implements the CustomProcessInput interface.
 */
export function instanceOfCustomProcessInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "executor" in value;
    isInstance = isInstance && "childProcessIds" in value;
    isInstance = isInstance && "parentProcessIds" in value;
    isInstance = isInstance && "linkedProjectIds" in value;

    return isInstance;
}

export function CustomProcessInputFromJSON(json: any): CustomProcessInput {
    return CustomProcessInputFromJSONTyped(json, false);
}

export function CustomProcessInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomProcessInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'executor': ExecutorFromJSON(json['executor']),
        'category': !exists(json, 'category') ? undefined : json['category'],
        'childProcessIds': json['childProcessIds'],
        'parentProcessIds': json['parentProcessIds'],
        'documentationUrl': !exists(json, 'documentationUrl') ? undefined : json['documentationUrl'],
        'fileRequirementsMessage': !exists(json, 'fileRequirementsMessage') ? undefined : json['fileRequirementsMessage'],
        'pipelineCode': !exists(json, 'pipelineCode') ? undefined : PipelineCodeFromJSON(json['pipelineCode']),
        'linkedProjectIds': json['linkedProjectIds'],
        'isTenantWide': !exists(json, 'isTenantWide') ? undefined : json['isTenantWide'],
        'allowMultipleSources': !exists(json, 'allowMultipleSources') ? undefined : json['allowMultipleSources'],
        'usesSampleSheet': !exists(json, 'usesSampleSheet') ? undefined : json['usesSampleSheet'],
        'customSettings': !exists(json, 'customSettings') ? undefined : CustomPipelineSettingsFromJSON(json['customSettings']),
        'fileMappingRules': !exists(json, 'fileMappingRules') ? undefined : (json['fileMappingRules'] === null ? null : (json['fileMappingRules'] as Array<any>).map(FileMappingRuleFromJSON)),
    };
}

export function CustomProcessInputToJSON(value?: CustomProcessInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'dataType': value.dataType,
        'executor': ExecutorToJSON(value.executor),
        'category': value.category,
        'childProcessIds': value.childProcessIds,
        'parentProcessIds': value.parentProcessIds,
        'documentationUrl': value.documentationUrl,
        'fileRequirementsMessage': value.fileRequirementsMessage,
        'pipelineCode': PipelineCodeToJSON(value.pipelineCode),
        'linkedProjectIds': value.linkedProjectIds,
        'isTenantWide': value.isTenantWide,
        'allowMultipleSources': value.allowMultipleSources,
        'usesSampleSheet': value.usesSampleSheet,
        'customSettings': CustomPipelineSettingsToJSON(value.customSettings),
        'fileMappingRules': value.fileMappingRules === undefined ? undefined : (value.fileMappingRules === null ? null : (value.fileMappingRules as Array<any>).map(FileMappingRuleToJSON)),
    };
}

