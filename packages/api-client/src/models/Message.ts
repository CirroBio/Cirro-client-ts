/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
} from './MessageType';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {MessageType}
     * @memberof Message
     */
    messageType: MessageType;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    parentMessageId?: string | null;
    /**
     * 
     * @type {Array<Entity>}
     * @memberof Message
     */
    links: Array<Entity>;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "messageType" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "links" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'messageType': MessageTypeFromJSON(json['messageType']),
        'id': json['id'],
        'message': json['message'],
        'parentMessageId': !exists(json, 'parentMessageId') ? undefined : json['parentMessageId'],
        'links': ((json['links'] as Array<any>).map(EntityFromJSON)),
        'createdBy': json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'messageType': MessageTypeToJSON(value.messageType),
        'id': value.id,
        'message': value.message,
        'parentMessageId': value.parentMessageId,
        'links': ((value.links as Array<any>).map(EntityToJSON)),
        'createdBy': value.createdBy,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

