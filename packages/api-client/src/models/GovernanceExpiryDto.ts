/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GovernanceExpiryType } from './GovernanceExpiryType';
import {
    GovernanceExpiryTypeFromJSON,
    GovernanceExpiryTypeFromJSONTyped,
    GovernanceExpiryTypeToJSON,
} from './GovernanceExpiryType';

/**
 * The GovernanceExpiry object that defines the expiry conditions for the requirement
 * @export
 * @interface GovernanceExpiryDto
 */
export interface GovernanceExpiryDto {
    /**
     * 
     * @type {GovernanceExpiryType}
     * @memberof GovernanceExpiryDto
     */
    type?: GovernanceExpiryType;
    /**
     * The number of days for a relative expiration
     * @type {number}
     * @memberof GovernanceExpiryDto
     */
    days?: number | null;
    /**
     * The date for an absolute expiration
     * @type {Date}
     * @memberof GovernanceExpiryDto
     */
    date?: Date | null;
}

/**
 * Check if a given object implements the GovernanceExpiryDto interface.
 */
export function instanceOfGovernanceExpiryDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GovernanceExpiryDtoFromJSON(json: any): GovernanceExpiryDto {
    return GovernanceExpiryDtoFromJSONTyped(json, false);
}

export function GovernanceExpiryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GovernanceExpiryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : GovernanceExpiryTypeFromJSON(json['type']),
        'days': !exists(json, 'days') ? undefined : json['days'],
        'date': !exists(json, 'date') ? undefined : (json['date'] === null ? null : new Date(json['date'])),
    };
}

export function GovernanceExpiryDtoToJSON(value?: GovernanceExpiryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': GovernanceExpiryTypeToJSON(value.type),
        'days': value.days,
        'date': value.date === undefined ? undefined : (value.date === null ? null : value.date.toISOString()),
    };
}

