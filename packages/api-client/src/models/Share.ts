/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ShareType } from './ShareType';
import {
    ShareTypeFromJSON,
    ShareTypeFromJSONTyped,
    ShareTypeToJSON,
} from './ShareType';

/**
 * 
 * @export
 * @interface Share
 */
export interface Share {
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    description: string;
    /**
     * The ID of the project that owns the share
     * @type {string}
     * @memberof Share
     */
    originatingProjectId: string;
    /**
     * 
     * @type {ShareType}
     * @memberof Share
     */
    shareType: ShareType;
    /**
     * 
     * @type {Array<string>}
     * @memberof Share
     */
    classificationIds: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Share
     */
    keywords: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Share
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Share
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Share interface.
 */
export function instanceOfShare(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "originatingProjectId" in value;
    isInstance = isInstance && "shareType" in value;
    isInstance = isInstance && "classificationIds" in value;
    isInstance = isInstance && "keywords" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ShareFromJSON(json: any): Share {
    return ShareFromJSONTyped(json, false);
}

export function ShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): Share {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'originatingProjectId': json['originatingProjectId'],
        'shareType': ShareTypeFromJSON(json['shareType']),
        'classificationIds': json['classificationIds'],
        'keywords': json['keywords'],
        'createdBy': json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ShareToJSON(value?: Share | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'originatingProjectId': value.originatingProjectId,
        'shareType': ShareTypeToJSON(value.shareType),
        'classificationIds': value.classificationIds,
        'keywords': value.keywords,
        'createdBy': value.createdBy,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

