/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DatasetCondition } from './DatasetCondition';
import {
    DatasetConditionFromJSON,
    DatasetConditionFromJSONTyped,
    DatasetConditionToJSON,
} from './DatasetCondition';

/**
 * 
 * @export
 * @interface ShareInput
 */
export interface ShareInput {
    /**
     * 
     * @type {string}
     * @memberof ShareInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ShareInput
     */
    description: string;
    /**
     * Data classification IDs for the share
     * @type {Array<string>}
     * @memberof ShareInput
     */
    classificationIds: Array<string>;
    /**
     * The conditions under which the dataset is shared
     * @type {Array<DatasetCondition>}
     * @memberof ShareInput
     */
    conditions: Array<DatasetCondition>;
    /**
     * Search keywords for the share
     * @type {Array<string>}
     * @memberof ShareInput
     */
    keywords?: Array<string>;
    /**
     * The project IDs that can access this share
     * @type {Array<string>}
     * @memberof ShareInput
     */
    sharedProjectIds?: Array<string>;
    /**
     * Whether files within the share are restricted from viewing or downloading
     * @type {boolean}
     * @memberof ShareInput
     */
    isViewRestricted?: boolean;
}

/**
 * Check if a given object implements the ShareInput interface.
 */
export function instanceOfShareInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "classificationIds" in value;
    isInstance = isInstance && "conditions" in value;

    return isInstance;
}

export function ShareInputFromJSON(json: any): ShareInput {
    return ShareInputFromJSONTyped(json, false);
}

export function ShareInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShareInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'classificationIds': json['classificationIds'],
        'conditions': ((json['conditions'] as Array<any>).map(DatasetConditionFromJSON)),
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'sharedProjectIds': !exists(json, 'sharedProjectIds') ? undefined : json['sharedProjectIds'],
        'isViewRestricted': !exists(json, 'isViewRestricted') ? undefined : json['isViewRestricted'],
    };
}

export function ShareInputToJSON(value?: ShareInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'classificationIds': value.classificationIds,
        'conditions': ((value.conditions as Array<any>).map(DatasetConditionToJSON)),
        'keywords': value.keywords,
        'sharedProjectIds': value.sharedProjectIds,
        'isViewRestricted': value.isViewRestricted,
    };
}

