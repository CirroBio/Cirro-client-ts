/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DatasetCondition } from './DatasetCondition';
import {
    DatasetConditionFromJSON,
    DatasetConditionFromJSONTyped,
    DatasetConditionToJSON,
} from './DatasetCondition';
import type { NamedItem } from './NamedItem';
import {
    NamedItemFromJSON,
    NamedItemFromJSONTyped,
    NamedItemToJSON,
} from './NamedItem';
import type { ShareType } from './ShareType';
import {
    ShareTypeFromJSON,
    ShareTypeFromJSONTyped,
    ShareTypeToJSON,
} from './ShareType';

/**
 * 
 * @export
 * @interface ShareDetail
 */
export interface ShareDetail {
    /**
     * 
     * @type {string}
     * @memberof ShareDetail
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ShareDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ShareDetail
     */
    description: string;
    /**
     * 
     * @type {NamedItem}
     * @memberof ShareDetail
     */
    originatingProject: NamedItem;
    /**
     * 
     * @type {ShareType}
     * @memberof ShareDetail
     */
    shareType: ShareType;
    /**
     * 
     * @type {Array<NamedItem>}
     * @memberof ShareDetail
     */
    sharedProjects: Array<NamedItem>;
    /**
     * The conditions under which the dataset is shared
     * @type {Array<DatasetCondition>}
     * @memberof ShareDetail
     */
    conditions: Array<DatasetCondition>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShareDetail
     */
    keywords: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShareDetail
     */
    classificationIds: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ShareDetail
     */
    isSubscribed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareDetail
     */
    isViewRestricted: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareDetail
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof ShareDetail
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ShareDetail
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the ShareDetail interface.
 */
export function instanceOfShareDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "originatingProject" in value;
    isInstance = isInstance && "shareType" in value;
    isInstance = isInstance && "sharedProjects" in value;
    isInstance = isInstance && "conditions" in value;
    isInstance = isInstance && "keywords" in value;
    isInstance = isInstance && "classificationIds" in value;
    isInstance = isInstance && "isSubscribed" in value;
    isInstance = isInstance && "isViewRestricted" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ShareDetailFromJSON(json: any): ShareDetail {
    return ShareDetailFromJSONTyped(json, false);
}

export function ShareDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShareDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'originatingProject': NamedItemFromJSON(json['originatingProject']),
        'shareType': ShareTypeFromJSON(json['shareType']),
        'sharedProjects': ((json['sharedProjects'] as Array<any>).map(NamedItemFromJSON)),
        'conditions': ((json['conditions'] as Array<any>).map(DatasetConditionFromJSON)),
        'keywords': json['keywords'],
        'classificationIds': json['classificationIds'],
        'isSubscribed': json['isSubscribed'],
        'isViewRestricted': json['isViewRestricted'],
        'createdBy': json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ShareDetailToJSON(value?: ShareDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'originatingProject': NamedItemToJSON(value.originatingProject),
        'shareType': ShareTypeToJSON(value.shareType),
        'sharedProjects': ((value.sharedProjects as Array<any>).map(NamedItemToJSON)),
        'conditions': ((value.conditions as Array<any>).map(DatasetConditionToJSON)),
        'keywords': value.keywords,
        'classificationIds': value.classificationIds,
        'isSubscribed': value.isSubscribed,
        'isViewRestricted': value.isViewRestricted,
        'createdBy': value.createdBy,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

