/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RunAnalysisRequest
 */
export interface RunAnalysisRequest {
    /**
     * Name of the dataset
     * @type {string}
     * @memberof RunAnalysisRequest
     */
    name: string;
    /**
     * Description of the dataset (optional)
     * @type {string}
     * @memberof RunAnalysisRequest
     */
    description?: string | null;
    /**
     * Process ID of the workflow
     * @type {string}
     * @memberof RunAnalysisRequest
     */
    processId: string;
    /**
     * These datasets contain files that are inputs to this workflow.
     * @type {Array<string>}
     * @memberof RunAnalysisRequest
     */
    sourceDatasetIds: Array<string>;
    /**
     * Samples within the source datasets that will be used as inputs to this workflow. If not specified, all samples will be used.
     * @type {Array<string>}
     * @memberof RunAnalysisRequest
     */
    sourceSampleIds?: Array<string> | null;
    /**
     * Files containing samples used to define source data input to this workflow. If not specified, all files will be used. Keys are sampleIds, and the lists are file paths to include.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof RunAnalysisRequest
     */
    sourceSampleFilesMap?: { [key: string]: Array<string>; } | null;
    /**
     * Used for caching task execution. If the parameters are the same as the dataset specified here, it will re-use the output to minimize duplicate work
     * @type {string}
     * @memberof RunAnalysisRequest
     */
    resumeDatasetId?: string | null;
    /**
     * Parameters used in workflow (can be empty)
     * @type {{ [key: string]: any; }}
     * @memberof RunAnalysisRequest
     */
    params: { [key: string]: any; };
    /**
     * Emails to notify upon workflow success or failure
     * @type {Array<string>}
     * @memberof RunAnalysisRequest
     */
    notificationEmails: Array<string>;
    /**
     * The compute environment where to run the workflow, if not specified, it will run in AWS
     * @type {string}
     * @memberof RunAnalysisRequest
     */
    computeEnvironmentId?: string | null;
}

/**
 * Check if a given object implements the RunAnalysisRequest interface.
 */
export function instanceOfRunAnalysisRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "processId" in value;
    isInstance = isInstance && "sourceDatasetIds" in value;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "notificationEmails" in value;

    return isInstance;
}

export function RunAnalysisRequestFromJSON(json: any): RunAnalysisRequest {
    return RunAnalysisRequestFromJSONTyped(json, false);
}

export function RunAnalysisRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RunAnalysisRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'processId': json['processId'],
        'sourceDatasetIds': json['sourceDatasetIds'],
        'sourceSampleIds': !exists(json, 'sourceSampleIds') ? undefined : json['sourceSampleIds'],
        'sourceSampleFilesMap': !exists(json, 'sourceSampleFilesMap') ? undefined : json['sourceSampleFilesMap'],
        'resumeDatasetId': !exists(json, 'resumeDatasetId') ? undefined : json['resumeDatasetId'],
        'params': json['params'],
        'notificationEmails': json['notificationEmails'],
        'computeEnvironmentId': !exists(json, 'computeEnvironmentId') ? undefined : json['computeEnvironmentId'],
    };
}

export function RunAnalysisRequestToJSON(value?: RunAnalysisRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'processId': value.processId,
        'sourceDatasetIds': value.sourceDatasetIds,
        'sourceSampleIds': value.sourceSampleIds,
        'sourceSampleFilesMap': value.sourceSampleFilesMap,
        'resumeDatasetId': value.resumeDatasetId,
        'params': value.params,
        'notificationEmails': value.notificationEmails,
        'computeEnvironmentId': value.computeEnvironmentId,
    };
}

