/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RepositoryType } from './RepositoryType';
import {
    RepositoryTypeFromJSON,
    RepositoryTypeFromJSONTyped,
    RepositoryTypeToJSON,
} from './RepositoryType';
import type { SyncStatus } from './SyncStatus';
import {
    SyncStatusFromJSON,
    SyncStatusFromJSONTyped,
    SyncStatusToJSON,
} from './SyncStatus';

/**
 * Used to describe the location of the process definition dependencies
 * @export
 * @interface CustomPipelineSettings
 */
export interface CustomPipelineSettings {
    /**
     * GitHub repository that contains the process definition
     * @type {string}
     * @memberof CustomPipelineSettings
     */
    repository: string;
    /**
     * Branch, tag, or commit hash of the repo that contains the process definition
     * @type {string}
     * @memberof CustomPipelineSettings
     */
    branch?: string;
    /**
     * Folder within the repo that contains the process definition
     * @type {string}
     * @memberof CustomPipelineSettings
     */
    folder?: string;
    /**
     * 
     * @type {RepositoryType}
     * @memberof CustomPipelineSettings
     */
    repositoryType?: RepositoryType | null;
    /**
     * Time of last sync
     * @type {Date}
     * @memberof CustomPipelineSettings
     */
    lastSync?: Date | null;
    /**
     * 
     * @type {SyncStatus}
     * @memberof CustomPipelineSettings
     */
    syncStatus?: SyncStatus | null;
    /**
     * Commit hash of the last successful sync
     * @type {string}
     * @memberof CustomPipelineSettings
     */
    commitHash?: string | null;
    /**
     * Whether we are authorized to access the repository
     * @type {boolean}
     * @memberof CustomPipelineSettings
     */
    isAuthorized?: boolean;
}

/**
 * Check if a given object implements the CustomPipelineSettings interface.
 */
export function instanceOfCustomPipelineSettings(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "repository" in value;

    return isInstance;
}

export function CustomPipelineSettingsFromJSON(json: any): CustomPipelineSettings {
    return CustomPipelineSettingsFromJSONTyped(json, false);
}

export function CustomPipelineSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomPipelineSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'repository': json['repository'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'folder': !exists(json, 'folder') ? undefined : json['folder'],
        'repositoryType': !exists(json, 'repositoryType') ? undefined : RepositoryTypeFromJSON(json['repositoryType']),
        'lastSync': !exists(json, 'lastSync') ? undefined : (json['lastSync'] === null ? null : new Date(json['lastSync'])),
        'syncStatus': !exists(json, 'syncStatus') ? undefined : SyncStatusFromJSON(json['syncStatus']),
        'commitHash': !exists(json, 'commitHash') ? undefined : json['commitHash'],
        'isAuthorized': !exists(json, 'isAuthorized') ? undefined : json['isAuthorized'],
    };
}

export function CustomPipelineSettingsToJSON(value?: CustomPipelineSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'repository': value.repository,
        'branch': value.branch,
        'folder': value.folder,
        'repositoryType': RepositoryTypeToJSON(value.repositoryType),
        'lastSync': value.lastSync === undefined ? undefined : (value.lastSync === null ? null : value.lastSync.toISOString()),
        'syncStatus': SyncStatusToJSON(value.syncStatus),
        'commitHash': value.commitHash,
        'isAuthorized': value.isAuthorized,
    };
}

