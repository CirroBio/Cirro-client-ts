/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuditEvent
 */
export interface AuditEvent {
    /**
     * The unique identifier for the audit event
     * @type {string}
     * @memberof AuditEvent
     */
    id?: string;
    /**
     * The type of event
     * @type {string}
     * @memberof AuditEvent
     */
    eventType?: string;
    /**
     * The project ID associated with the event (if applicable)
     * @type {string}
     * @memberof AuditEvent
     */
    projectId?: string;
    /**
     * The entity ID associated with the event
     * @type {string}
     * @memberof AuditEvent
     */
    entityId?: string;
    /**
     * The entity type associated with the event
     * @type {string}
     * @memberof AuditEvent
     */
    entityType?: string;
    /**
     * The details of the event, such as the request details sent from the client
     * @type {{ [key: string]: any; }}
     * @memberof AuditEvent
     */
    eventDetail?: { [key: string]: any; };
    /**
     * The changes made to the entity (if applicable)
     * @type {{ [key: string]: string; }}
     * @memberof AuditEvent
     */
    changes?: { [key: string]: string; };
    /**
     * The username of the user who performed the action
     * @type {string}
     * @memberof AuditEvent
     */
    username?: string;
    /**
     * The IP address of the user who performed the action
     * @type {string}
     * @memberof AuditEvent
     */
    ipAddress?: string;
    /**
     * The date and time the event was created
     * @type {Date}
     * @memberof AuditEvent
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the AuditEvent interface.
 */
export function instanceOfAuditEvent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuditEventFromJSON(json: any): AuditEvent {
    return AuditEventFromJSONTyped(json, false);
}

export function AuditEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
        'eventDetail': !exists(json, 'eventDetail') ? undefined : json['eventDetail'],
        'changes': !exists(json, 'changes') ? undefined : json['changes'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function AuditEventToJSON(value?: AuditEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'eventType': value.eventType,
        'projectId': value.projectId,
        'entityId': value.entityId,
        'entityType': value.entityType,
        'eventDetail': value.eventDetail,
        'changes': value.changes,
        'username': value.username,
        'ipAddress': value.ipAddress,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

