/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configuration parameters for a containerized workspace compute environment.
 * @export
 * @interface WorkspaceComputeConfig
 */
export interface WorkspaceComputeConfig {
    /**
     * Fully qualified container image URI (including registry, repository, and tag).
     * @type {string}
     * @memberof WorkspaceComputeConfig
     */
    containerImageUri: string;
    /**
     * Number of vCPU cores allocated to the workspace.
     * @type {number}
     * @memberof WorkspaceComputeConfig
     */
    cpu?: number;
    /**
     * Memory allocated to the workspace container in GiB.
     * @type {number}
     * @memberof WorkspaceComputeConfig
     */
    memoryGib?: number;
    /**
     * Persistent storage volume size allocated to the workspace in GiB.
     * @type {number}
     * @memberof WorkspaceComputeConfig
     */
    volumeSizeGib?: number;
    /**
     * Map of environment variables injected into the container at runtime. Keys must be non-blank.
     * @type {{ [key: string]: string; }}
     * @memberof WorkspaceComputeConfig
     */
    environmentVariables?: { [key: string]: string; } | null;
    /**
     * User-facing web server port (http).
     * @type {number}
     * @memberof WorkspaceComputeConfig
     */
    localPort?: number;
}

/**
 * Check if a given object implements the WorkspaceComputeConfig interface.
 */
export function instanceOfWorkspaceComputeConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "containerImageUri" in value;

    return isInstance;
}

export function WorkspaceComputeConfigFromJSON(json: any): WorkspaceComputeConfig {
    return WorkspaceComputeConfigFromJSONTyped(json, false);
}

export function WorkspaceComputeConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceComputeConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'containerImageUri': json['containerImageUri'],
        'cpu': !exists(json, 'cpu') ? undefined : json['cpu'],
        'memoryGib': !exists(json, 'memoryGib') ? undefined : json['memoryGib'],
        'volumeSizeGib': !exists(json, 'volumeSizeGib') ? undefined : json['volumeSizeGib'],
        'environmentVariables': !exists(json, 'environmentVariables') ? undefined : json['environmentVariables'],
        'localPort': !exists(json, 'localPort') ? undefined : json['localPort'],
    };
}

export function WorkspaceComputeConfigToJSON(value?: WorkspaceComputeConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'containerImageUri': value.containerImageUri,
        'cpu': value.cpu,
        'memoryGib': value.memoryGib,
        'volumeSizeGib': value.volumeSizeGib,
        'environmentVariables': value.environmentVariables,
        'localPort': value.localPort,
    };
}

