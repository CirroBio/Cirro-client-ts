/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupCost } from './GroupCost';
import {
    GroupCostFromJSON,
    GroupCostFromJSONTyped,
    GroupCostToJSON,
} from './GroupCost';
import type { TaskCost } from './TaskCost';
import {
    TaskCostFromJSON,
    TaskCostFromJSONTyped,
    TaskCostToJSON,
} from './TaskCost';

/**
 * 
 * @export
 * @interface CostResponse
 */
export interface CostResponse {
    /**
     * Total cost
     * @type {number}
     * @memberof CostResponse
     */
    totalCost?: number;
    /**
     * Costs grouped by the task status
     * @type {Array<GroupCost>}
     * @memberof CostResponse
     */
    groups?: Array<GroupCost>;
    /**
     * Costs for each workflow task
     * @type {Array<TaskCost>}
     * @memberof CostResponse
     */
    tasks?: Array<TaskCost>;
    /**
     * Whether this is an estimated cost
     * @type {boolean}
     * @memberof CostResponse
     */
    isEstimate?: boolean;
}

/**
 * Check if a given object implements the CostResponse interface.
 */
export function instanceOfCostResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CostResponseFromJSON(json: any): CostResponse {
    return CostResponseFromJSONTyped(json, false);
}

export function CostResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CostResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalCost': !exists(json, 'totalCost') ? undefined : json['totalCost'],
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(GroupCostFromJSON)),
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskCostFromJSON)),
        'isEstimate': !exists(json, 'isEstimate') ? undefined : json['isEstimate'],
    };
}

export function CostResponseToJSON(value?: CostResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalCost': value.totalCost,
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(GroupCostToJSON)),
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskCostToJSON)),
        'isEstimate': value.isEstimate,
    };
}

