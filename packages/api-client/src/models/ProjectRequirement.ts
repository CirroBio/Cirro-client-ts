/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GovernanceContact } from './GovernanceContact';
import {
    GovernanceContactFromJSON,
    GovernanceContactFromJSONTyped,
    GovernanceContactToJSON,
} from './GovernanceContact';
import type { GovernanceExpiryType } from './GovernanceExpiryType';
import {
    GovernanceExpiryTypeFromJSON,
    GovernanceExpiryTypeFromJSONTyped,
    GovernanceExpiryTypeToJSON,
} from './GovernanceExpiryType';
import type { GovernanceFile } from './GovernanceFile';
import {
    GovernanceFileFromJSON,
    GovernanceFileFromJSONTyped,
    GovernanceFileToJSON,
} from './GovernanceFile';
import type { GovernanceScope } from './GovernanceScope';
import {
    GovernanceScopeFromJSON,
    GovernanceScopeFromJSONTyped,
    GovernanceScopeToJSON,
} from './GovernanceScope';
import type { GovernanceTrainingVerification } from './GovernanceTrainingVerification';
import {
    GovernanceTrainingVerificationFromJSON,
    GovernanceTrainingVerificationFromJSONTyped,
    GovernanceTrainingVerificationToJSON,
} from './GovernanceTrainingVerification';
import type { GovernanceType } from './GovernanceType';
import {
    GovernanceTypeFromJSON,
    GovernanceTypeFromJSONTyped,
    GovernanceTypeToJSON,
} from './GovernanceType';

/**
 * 
 * @export
 * @interface ProjectRequirement
 */
export interface ProjectRequirement {
    /**
     * The unique identifier for the requirement
     * @type {string}
     * @memberof ProjectRequirement
     */
    id: string;
    /**
     * The name of the requirement
     * @type {string}
     * @memberof ProjectRequirement
     */
    name: string;
    /**
     * A brief description of the requirement
     * @type {string}
     * @memberof ProjectRequirement
     */
    description: string;
    /**
     * 
     * @type {GovernanceType}
     * @memberof ProjectRequirement
     */
    type: GovernanceType;
    /**
     * S3 prefix where files for the requirement are saved
     * @type {string}
     * @memberof ProjectRequirement
     */
    path: string;
    /**
     * 
     * @type {GovernanceScope}
     * @memberof ProjectRequirement
     */
    scope: GovernanceScope;
    /**
     * 
     * @type {GovernanceScope}
     * @memberof ProjectRequirement
     */
    acceptance?: GovernanceScope | null;
    /**
     * The governance contacts assigned to the requirement.
     * @type {Array<GovernanceContact>}
     * @memberof ProjectRequirement
     */
    contacts: Array<GovernanceContact>;
    /**
     * The date of enactment for the requirement
     * @type {Date}
     * @memberof ProjectRequirement
     */
    enactmentDate?: Date | null;
    /**
     * 
     * @type {GovernanceExpiryType}
     * @memberof ProjectRequirement
     */
    expirationType?: GovernanceExpiryType;
    /**
     * The number of days for a relative to completion expiration
     * @type {number}
     * @memberof ProjectRequirement
     */
    expirationDaysAfterCompletion?: number | null;
    /**
     * The date of expiration for the requirement
     * @type {Date}
     * @memberof ProjectRequirement
     */
    expirationDate?: Date | null;
    /**
     * Optional files with extra information, e.g. templates for documents, links, etc
     * @type {Array<GovernanceFile>}
     * @memberof ProjectRequirement
     */
    supplementalDocs?: Array<GovernanceFile> | null;
    /**
     * 
     * @type {GovernanceFile}
     * @memberof ProjectRequirement
     */
    file?: GovernanceFile | null;
    /**
     * 
     * @type {GovernanceScope}
     * @memberof ProjectRequirement
     */
    authorship?: GovernanceScope | null;
    /**
     * 
     * @type {GovernanceTrainingVerification}
     * @memberof ProjectRequirement
     */
    verificationMethod?: GovernanceTrainingVerification | null;
    /**
     * Whether the current user has fulfilled the requirement for this project
     * @type {boolean}
     * @memberof ProjectRequirement
     */
    isFulfilled: boolean;
    /**
     * The date the requirement was fulfilled by the user
     * @type {Date}
     * @memberof ProjectRequirement
     */
    fulfillmentDate?: Date | null;
    /**
     * The optional file uploaded to fulfill the requirement
     * @type {string}
     * @memberof ProjectRequirement
     */
    fulfillmentFile?: string | null;
}

/**
 * Check if a given object implements the ProjectRequirement interface.
 */
export function instanceOfProjectRequirement(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "contacts" in value;
    isInstance = isInstance && "isFulfilled" in value;

    return isInstance;
}

export function ProjectRequirementFromJSON(json: any): ProjectRequirement {
    return ProjectRequirementFromJSONTyped(json, false);
}

export function ProjectRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectRequirement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'type': GovernanceTypeFromJSON(json['type']),
        'path': json['path'],
        'scope': GovernanceScopeFromJSON(json['scope']),
        'acceptance': !exists(json, 'acceptance') ? undefined : GovernanceScopeFromJSON(json['acceptance']),
        'contacts': ((json['contacts'] as Array<any>).map(GovernanceContactFromJSON)),
        'enactmentDate': !exists(json, 'enactmentDate') ? undefined : (json['enactmentDate'] === null ? null : new Date(json['enactmentDate'])),
        'expirationType': !exists(json, 'expirationType') ? undefined : GovernanceExpiryTypeFromJSON(json['expirationType']),
        'expirationDaysAfterCompletion': !exists(json, 'expirationDaysAfterCompletion') ? undefined : json['expirationDaysAfterCompletion'],
        'expirationDate': !exists(json, 'expirationDate') ? undefined : (json['expirationDate'] === null ? null : new Date(json['expirationDate'])),
        'supplementalDocs': !exists(json, 'supplementalDocs') ? undefined : (json['supplementalDocs'] === null ? null : (json['supplementalDocs'] as Array<any>).map(GovernanceFileFromJSON)),
        'file': !exists(json, 'file') ? undefined : GovernanceFileFromJSON(json['file']),
        'authorship': !exists(json, 'authorship') ? undefined : GovernanceScopeFromJSON(json['authorship']),
        'verificationMethod': !exists(json, 'verificationMethod') ? undefined : GovernanceTrainingVerificationFromJSON(json['verificationMethod']),
        'isFulfilled': json['isFulfilled'],
        'fulfillmentDate': !exists(json, 'fulfillmentDate') ? undefined : (json['fulfillmentDate'] === null ? null : new Date(json['fulfillmentDate'])),
        'fulfillmentFile': !exists(json, 'fulfillmentFile') ? undefined : json['fulfillmentFile'],
    };
}

export function ProjectRequirementToJSON(value?: ProjectRequirement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'type': GovernanceTypeToJSON(value.type),
        'path': value.path,
        'scope': GovernanceScopeToJSON(value.scope),
        'acceptance': GovernanceScopeToJSON(value.acceptance),
        'contacts': ((value.contacts as Array<any>).map(GovernanceContactToJSON)),
        'enactmentDate': value.enactmentDate === undefined ? undefined : (value.enactmentDate === null ? null : value.enactmentDate.toISOString()),
        'expirationType': GovernanceExpiryTypeToJSON(value.expirationType),
        'expirationDaysAfterCompletion': value.expirationDaysAfterCompletion,
        'expirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate === null ? null : value.expirationDate.toISOString()),
        'supplementalDocs': value.supplementalDocs === undefined ? undefined : (value.supplementalDocs === null ? null : (value.supplementalDocs as Array<any>).map(GovernanceFileToJSON)),
        'file': GovernanceFileToJSON(value.file),
        'authorship': GovernanceScopeToJSON(value.authorship),
        'verificationMethod': GovernanceTrainingVerificationToJSON(value.verificationMethod),
        'isFulfilled': value.isFulfilled,
        'fulfillmentDate': value.fulfillmentDate === undefined ? undefined : (value.fulfillmentDate === null ? null : value.fulfillmentDate.toISOString()),
        'fulfillmentFile': value.fulfillmentFile,
    };
}

