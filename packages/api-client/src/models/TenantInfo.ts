/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LoginProvider } from './LoginProvider';
import {
    LoginProviderFromJSON,
    LoginProviderFromJSONTyped,
    LoginProviderToJSON,
} from './LoginProvider';

/**
 * 
 * @export
 * @interface TenantInfo
 */
export interface TenantInfo {
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    contactEmail: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    tenantLogoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    termsOfServiceUrl: string;
    /**
     * 
     * @type {string}
     * @memberof TenantInfo
     */
    privacyPolicyUrl: string;
    /**
     * 
     * @type {Array<LoginProvider>}
     * @memberof TenantInfo
     */
    loginProviders: Array<LoginProvider>;
}

/**
 * Check if a given object implements the TenantInfo interface.
 */
export function instanceOfTenantInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "contactEmail" in value;
    isInstance = isInstance && "tenantLogoUrl" in value;
    isInstance = isInstance && "termsOfServiceUrl" in value;
    isInstance = isInstance && "privacyPolicyUrl" in value;
    isInstance = isInstance && "loginProviders" in value;

    return isInstance;
}

export function TenantInfoFromJSON(json: any): TenantInfo {
    return TenantInfoFromJSONTyped(json, false);
}

export function TenantInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TenantInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'location': json['location'],
        'contactEmail': json['contactEmail'],
        'tenantLogoUrl': json['tenantLogoUrl'],
        'termsOfServiceUrl': json['termsOfServiceUrl'],
        'privacyPolicyUrl': json['privacyPolicyUrl'],
        'loginProviders': ((json['loginProviders'] as Array<any>).map(LoginProviderFromJSON)),
    };
}

export function TenantInfoToJSON(value?: TenantInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'location': value.location,
        'contactEmail': value.contactEmail,
        'tenantLogoUrl': value.tenantLogoUrl,
        'termsOfServiceUrl': value.termsOfServiceUrl,
        'privacyPolicyUrl': value.privacyPolicyUrl,
        'loginProviders': ((value.loginProviders as Array<any>).map(LoginProviderToJSON)),
    };
}

