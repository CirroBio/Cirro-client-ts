/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RepositoryType } from './RepositoryType';
import {
    RepositoryTypeFromJSON,
    RepositoryTypeFromJSONTyped,
    RepositoryTypeToJSON,
} from './RepositoryType';

/**
 * Used to describe the pipeline analysis code
 * @export
 * @interface PipelineCode
 */
export interface PipelineCode {
    /**
     * GitHub repository which contains the workflow code
     * @type {string}
     * @memberof PipelineCode
     */
    repositoryPath: string;
    /**
     * Branch, tag, or commit hash of the pipeline code
     * @type {string}
     * @memberof PipelineCode
     */
    version?: string;
    /**
     * 
     * @type {RepositoryType}
     * @memberof PipelineCode
     */
    repositoryType?: RepositoryType;
    /**
     * Main script for running the pipeline
     * @type {string}
     * @memberof PipelineCode
     */
    entryPoint?: string;
}

/**
 * Check if a given object implements the PipelineCode interface.
 */
export function instanceOfPipelineCode(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "repositoryPath" in value;

    return isInstance;
}

export function PipelineCodeFromJSON(json: any): PipelineCode {
    return PipelineCodeFromJSONTyped(json, false);
}

export function PipelineCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelineCode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'repositoryPath': json['repositoryPath'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'repositoryType': !exists(json, 'repositoryType') ? undefined : RepositoryTypeFromJSON(json['repositoryType']),
        'entryPoint': !exists(json, 'entryPoint') ? undefined : json['entryPoint'],
    };
}

export function PipelineCodeToJSON(value?: PipelineCode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'repositoryPath': value.repositoryPath,
        'version': value.version,
        'repositoryType': RepositoryTypeToJSON(value.repositoryType),
        'entryPoint': value.entryPoint,
    };
}

