/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FileNamePattern } from './FileNamePattern';
import {
    FileNamePatternFromJSON,
    FileNamePatternFromJSONTyped,
    FileNamePatternToJSON,
} from './FileNamePattern';

/**
 * 
 * @export
 * @interface FileMappingRule
 */
export interface FileMappingRule {
    /**
     * Describes the group of possible files that meet a single file type criteria.
     * @type {string}
     * @memberof FileMappingRule
     */
    description: string;
    /**
     * Minimum number of files to expect for the file type group.
     * @type {number}
     * @memberof FileMappingRule
     */
    min?: number;
    /**
     * Maximum number of files to expect for the file type group.
     * @type {number}
     * @memberof FileMappingRule
     */
    max?: number;
    /**
     * Specifies if the file type will be associated with a sample.
     * @type {boolean}
     * @memberof FileMappingRule
     */
    isSample?: boolean;
    /**
     * Describes the possible file patterns to expect for the file type group.
     * @type {Array<FileNamePattern>}
     * @memberof FileMappingRule
     */
    fileNamePatterns: Array<FileNamePattern>;
}

/**
 * Check if a given object implements the FileMappingRule interface.
 */
export function instanceOfFileMappingRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "fileNamePatterns" in value;

    return isInstance;
}

export function FileMappingRuleFromJSON(json: any): FileMappingRule {
    return FileMappingRuleFromJSONTyped(json, false);
}

export function FileMappingRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileMappingRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'min': !exists(json, 'min') ? undefined : json['min'],
        'max': !exists(json, 'max') ? undefined : json['max'],
        'isSample': !exists(json, 'isSample') ? undefined : json['isSample'],
        'fileNamePatterns': ((json['fileNamePatterns'] as Array<any>).map(FileNamePatternFromJSON)),
    };
}

export function FileMappingRuleToJSON(value?: FileMappingRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'min': value.min,
        'max': value.max,
        'isSample': value.isSample,
        'fileNamePatterns': ((value.fileNamePatterns as Array<any>).map(FileNamePatternToJSON)),
    };
}

