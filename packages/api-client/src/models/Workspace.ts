/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MountedDataset } from './MountedDataset';
import {
    MountedDatasetFromJSON,
    MountedDatasetFromJSONTyped,
    MountedDatasetToJSON,
} from './MountedDataset';
import type { SharingType } from './SharingType';
import {
    SharingTypeFromJSON,
    SharingTypeFromJSONTyped,
    SharingTypeToJSON,
} from './SharingType';
import type { Status } from './Status';
import {
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
} from './Status';
import type { WorkspaceComputeConfig } from './WorkspaceComputeConfig';
import {
    WorkspaceComputeConfigFromJSON,
    WorkspaceComputeConfigFromJSONTyped,
    WorkspaceComputeConfigToJSON,
} from './WorkspaceComputeConfig';
import type { WorkspaceSession } from './WorkspaceSession';
import {
    WorkspaceSessionFromJSON,
    WorkspaceSessionFromJSONTyped,
    WorkspaceSessionToJSON,
} from './WorkspaceSession';

/**
 * 
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    description: string;
    /**
     * 
     * @type {Status}
     * @memberof Workspace
     */
    status: Status;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    statusMessage: string;
    /**
     * 
     * @type {Array<MountedDataset>}
     * @memberof Workspace
     */
    mountedDatasets: Array<MountedDataset>;
    /**
     * 
     * @type {WorkspaceComputeConfig}
     * @memberof Workspace
     */
    computeConfig: WorkspaceComputeConfig;
    /**
     * 
     * @type {SharingType}
     * @memberof Workspace
     */
    sharingType: SharingType;
    /**
     * 
     * @type {Array<WorkspaceSession>}
     * @memberof Workspace
     */
    sessions?: Array<WorkspaceSession> | null;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Workspace
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Workspace
     */
    startedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Workspace
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Workspace interface.
 */
export function instanceOfWorkspace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "statusMessage" in value;
    isInstance = isInstance && "mountedDatasets" in value;
    isInstance = isInstance && "computeConfig" in value;
    isInstance = isInstance && "sharingType" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "startedAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function WorkspaceFromJSON(json: any): Workspace {
    return WorkspaceFromJSONTyped(json, false);
}

export function WorkspaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workspace {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'status': StatusFromJSON(json['status']),
        'statusMessage': json['statusMessage'],
        'mountedDatasets': ((json['mountedDatasets'] as Array<any>).map(MountedDatasetFromJSON)),
        'computeConfig': WorkspaceComputeConfigFromJSON(json['computeConfig']),
        'sharingType': SharingTypeFromJSON(json['sharingType']),
        'sessions': !exists(json, 'sessions') ? undefined : (json['sessions'] === null ? null : (json['sessions'] as Array<any>).map(WorkspaceSessionFromJSON)),
        'createdBy': json['createdBy'],
        'createdAt': (new Date(json['createdAt'])),
        'startedAt': (new Date(json['startedAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function WorkspaceToJSON(value?: Workspace | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'status': StatusToJSON(value.status),
        'statusMessage': value.statusMessage,
        'mountedDatasets': ((value.mountedDatasets as Array<any>).map(MountedDatasetToJSON)),
        'computeConfig': WorkspaceComputeConfigToJSON(value.computeConfig),
        'sharingType': SharingTypeToJSON(value.sharingType),
        'sessions': value.sessions === undefined ? undefined : (value.sessions === null ? null : (value.sessions as Array<any>).map(WorkspaceSessionToJSON)),
        'createdBy': value.createdBy,
        'createdAt': (value.createdAt.toISOString()),
        'startedAt': (value.startedAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

