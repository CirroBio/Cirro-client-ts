/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomProcessRequestPipelineCode } from './CustomProcessRequestPipelineCode';
import {
    CustomProcessRequestPipelineCodeFromJSON,
    CustomProcessRequestPipelineCodeFromJSONTyped,
    CustomProcessRequestPipelineCodeToJSON,
} from './CustomProcessRequestPipelineCode';
import type { Executor } from './Executor';
import {
    ExecutorFromJSON,
    ExecutorFromJSONTyped,
    ExecutorToJSON,
} from './Executor';

/**
 * 
 * @export
 * @interface CustomProcessRequest
 */
export interface CustomProcessRequest {
    /**
     * Unique ID for the process
     * @type {string}
     * @memberof CustomProcessRequest
     */
    processId?: string;
    /**
     * Friendly name for the process
     * @type {string}
     * @memberof CustomProcessRequest
     */
    name?: string;
    /**
     * Describes the analysis performed by the process
     * @type {string}
     * @memberof CustomProcessRequest
     */
    description: string;
    /**
     * Link to pipeline documentation
     * @type {string}
     * @memberof CustomProcessRequest
     */
    documentationUrl?: string;
    /**
     * 
     * @type {Executor}
     * @memberof CustomProcessRequest
     */
    executor: Executor;
    /**
     * 
     * @type {CustomProcessRequestPipelineCode}
     * @memberof CustomProcessRequest
     */
    pipelineCode: CustomProcessRequestPipelineCode;
    /**
     * Downstream pipeline IDs, the pipelines which can be run off of the outputs to this pipeline
     * @type {Array<string>}
     * @memberof CustomProcessRequest
     */
    childProcessIds: Array<string>;
    /**
     * Upstream process IDs, these processes provide the type of input data required for this pipeline
     * @type {Array<string>}
     * @memberof CustomProcessRequest
     */
    parentProcessIds: Array<string>;
    /**
     * Projects that this process is linked to
     * @type {Array<string>}
     * @memberof CustomProcessRequest
     */
    projectIds: Array<string>;
    /**
     * GitHub repository that contains the process definition
     * @type {string}
     * @memberof CustomProcessRequest
     */
    definitionRepository: string;
    /**
     * 
     * @type {string}
     * @memberof CustomProcessRequest
     */
    definitionBranch: string;
    /**
     * 
     * @type {string}
     * @memberof CustomProcessRequest
     */
    definitionFolder: string;
}

/**
 * Check if a given object implements the CustomProcessRequest interface.
 */
export function instanceOfCustomProcessRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "executor" in value;
    isInstance = isInstance && "pipelineCode" in value;
    isInstance = isInstance && "childProcessIds" in value;
    isInstance = isInstance && "parentProcessIds" in value;
    isInstance = isInstance && "projectIds" in value;
    isInstance = isInstance && "definitionRepository" in value;
    isInstance = isInstance && "definitionBranch" in value;
    isInstance = isInstance && "definitionFolder" in value;

    return isInstance;
}

export function CustomProcessRequestFromJSON(json: any): CustomProcessRequest {
    return CustomProcessRequestFromJSONTyped(json, false);
}

export function CustomProcessRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomProcessRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'processId': !exists(json, 'processId') ? undefined : json['processId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': json['description'],
        'documentationUrl': !exists(json, 'documentationUrl') ? undefined : json['documentationUrl'],
        'executor': ExecutorFromJSON(json['executor']),
        'pipelineCode': CustomProcessRequestPipelineCodeFromJSON(json['pipelineCode']),
        'childProcessIds': json['childProcessIds'],
        'parentProcessIds': json['parentProcessIds'],
        'projectIds': json['projectIds'],
        'definitionRepository': json['definitionRepository'],
        'definitionBranch': json['definitionBranch'],
        'definitionFolder': json['definitionFolder'],
    };
}

export function CustomProcessRequestToJSON(value?: CustomProcessRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'processId': value.processId,
        'name': value.name,
        'description': value.description,
        'documentationUrl': value.documentationUrl,
        'executor': ExecutorToJSON(value.executor),
        'pipelineCode': CustomProcessRequestPipelineCodeToJSON(value.pipelineCode),
        'childProcessIds': value.childProcessIds,
        'parentProcessIds': value.parentProcessIds,
        'projectIds': value.projectIds,
        'definitionRepository': value.definitionRepository,
        'definitionBranch': value.definitionBranch,
        'definitionFolder': value.definitionFolder,
    };
}

