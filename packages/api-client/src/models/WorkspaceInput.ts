/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MountedDataset } from './MountedDataset';
import {
    MountedDatasetFromJSON,
    MountedDatasetFromJSONTyped,
    MountedDatasetToJSON,
} from './MountedDataset';
import type { SharingType } from './SharingType';
import {
    SharingTypeFromJSON,
    SharingTypeFromJSONTyped,
    SharingTypeToJSON,
} from './SharingType';
import type { WorkspaceComputeConfig } from './WorkspaceComputeConfig';
import {
    WorkspaceComputeConfigFromJSON,
    WorkspaceComputeConfigFromJSONTyped,
    WorkspaceComputeConfigToJSON,
} from './WorkspaceComputeConfig';

/**
 * 
 * @export
 * @interface WorkspaceInput
 */
export interface WorkspaceInput {
    /**
     * Name of the workspace.
     * @type {string}
     * @memberof WorkspaceInput
     */
    name: string;
    /**
     * Description of the workspace.
     * @type {string}
     * @memberof WorkspaceInput
     */
    description?: string;
    /**
     * List of datasets to mount into the workspace.
     * @type {Array<MountedDataset>}
     * @memberof WorkspaceInput
     */
    mountedDatasets: Array<MountedDataset>;
    /**
     * 
     * @type {WorkspaceComputeConfig}
     * @memberof WorkspaceInput
     */
    computeConfig: WorkspaceComputeConfig;
    /**
     * 
     * @type {SharingType}
     * @memberof WorkspaceInput
     */
    sharingType: SharingType;
}

/**
 * Check if a given object implements the WorkspaceInput interface.
 */
export function instanceOfWorkspaceInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "mountedDatasets" in value;
    isInstance = isInstance && "computeConfig" in value;
    isInstance = isInstance && "sharingType" in value;

    return isInstance;
}

export function WorkspaceInputFromJSON(json: any): WorkspaceInput {
    return WorkspaceInputFromJSONTyped(json, false);
}

export function WorkspaceInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'mountedDatasets': ((json['mountedDatasets'] as Array<any>).map(MountedDatasetFromJSON)),
        'computeConfig': WorkspaceComputeConfigFromJSON(json['computeConfig']),
        'sharingType': SharingTypeFromJSON(json['sharingType']),
    };
}

export function WorkspaceInputToJSON(value?: WorkspaceInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'mountedDatasets': ((value.mountedDatasets as Array<any>).map(MountedDatasetToJSON)),
        'computeConfig': WorkspaceComputeConfigToJSON(value.computeConfig),
        'sharingType': SharingTypeToJSON(value.sharingType),
    };
}

