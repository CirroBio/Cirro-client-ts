/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkspaceComputeConfig } from './WorkspaceComputeConfig';
import {
    WorkspaceComputeConfigFromJSON,
    WorkspaceComputeConfigFromJSONTyped,
    WorkspaceComputeConfigToJSON,
} from './WorkspaceComputeConfig';

/**
 * 
 * @export
 * @interface WorkspaceEnvironment
 */
export interface WorkspaceEnvironment {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceEnvironment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceEnvironment
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceEnvironment
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceEnvironment
     */
    category: string;
    /**
     * 
     * @type {WorkspaceComputeConfig}
     * @memberof WorkspaceEnvironment
     */
    defaultComputeConfig: WorkspaceComputeConfig;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceEnvironment
     */
    owner: string;
}

/**
 * Check if a given object implements the WorkspaceEnvironment interface.
 */
export function instanceOfWorkspaceEnvironment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "defaultComputeConfig" in value;
    isInstance = isInstance && "owner" in value;

    return isInstance;
}

export function WorkspaceEnvironmentFromJSON(json: any): WorkspaceEnvironment {
    return WorkspaceEnvironmentFromJSONTyped(json, false);
}

export function WorkspaceEnvironmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceEnvironment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'category': json['category'],
        'defaultComputeConfig': WorkspaceComputeConfigFromJSON(json['defaultComputeConfig']),
        'owner': json['owner'],
    };
}

export function WorkspaceEnvironmentToJSON(value?: WorkspaceEnvironment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'category': value.category,
        'defaultComputeConfig': WorkspaceComputeConfigToJSON(value.defaultComputeConfig),
        'owner': value.owner,
    };
}

