/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AllowedDataType } from './AllowedDataType';
import {
    AllowedDataTypeFromJSON,
    AllowedDataTypeFromJSONTyped,
    AllowedDataTypeToJSON,
} from './AllowedDataType';

/**
 * 
 * @export
 * @interface ValidateDataInputsResponse
 */
export interface ValidateDataInputsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidateDataInputsResponse
     */
    files: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidateDataInputsResponse
     */
    errorMsg: string;
    /**
     * 
     * @type {Array<AllowedDataType>}
     * @memberof ValidateDataInputsResponse
     */
    allowedDataTypes: Array<AllowedDataType>;
}

/**
 * Check if a given object implements the ValidateDataInputsResponse interface.
 */
export function instanceOfValidateDataInputsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "files" in value;
    isInstance = isInstance && "errorMsg" in value;
    isInstance = isInstance && "allowedDataTypes" in value;

    return isInstance;
}

export function ValidateDataInputsResponseFromJSON(json: any): ValidateDataInputsResponse {
    return ValidateDataInputsResponseFromJSONTyped(json, false);
}

export function ValidateDataInputsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidateDataInputsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'files': json['files'],
        'errorMsg': json['errorMsg'],
        'allowedDataTypes': ((json['allowedDataTypes'] as Array<any>).map(AllowedDataTypeFromJSON)),
    };
}

export function ValidateDataInputsResponseToJSON(value?: ValidateDataInputsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'files': value.files,
        'errorMsg': value.errorMsg,
        'allowedDataTypes': ((value.allowedDataTypes as Array<any>).map(AllowedDataTypeToJSON)),
    };
}

