/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ColumnDefinition } from './ColumnDefinition';
import {
    ColumnDefinitionFromJSON,
    ColumnDefinitionFromJSONTyped,
    ColumnDefinitionToJSON,
} from './ColumnDefinition';

/**
 * 
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * User-friendly name of asset
     * @type {string}
     * @memberof Table
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Table
     */
    desc: string;
    /**
     * Type of file
     * @type {string}
     * @memberof Table
     */
    type?: string;
    /**
     * Number of rows in table
     * @type {number}
     * @memberof Table
     */
    rows?: number;
    /**
     * Relative path to asset
     * @type {string}
     * @memberof Table
     */
    path?: string;
    /**
     * 
     * @type {Array<ColumnDefinition>}
     * @memberof Table
     */
    cols: Array<ColumnDefinition>;
}

/**
 * Check if a given object implements the Table interface.
 */
export function instanceOfTable(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "desc" in value;
    isInstance = isInstance && "cols" in value;

    return isInstance;
}

export function TableFromJSON(json: any): Table {
    return TableFromJSONTyped(json, false);
}

export function TableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Table {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'desc': json['desc'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'rows': !exists(json, 'rows') ? undefined : json['rows'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'cols': ((json['cols'] as Array<any>).map(ColumnDefinitionFromJSON)),
    };
}

export function TableToJSON(value?: Table | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'desc': value.desc,
        'type': value.type,
        'rows': value.rows,
        'path': value.path,
        'cols': ((value.cols as Array<any>).map(ColumnDefinitionToJSON)),
    };
}

