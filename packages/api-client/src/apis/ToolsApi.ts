/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MoveDatasetInput,
  MoveDatasetResponse,
} from '../models/index';
import {
    MoveDatasetInputFromJSON,
    MoveDatasetInputToJSON,
    MoveDatasetResponseFromJSON,
    MoveDatasetResponseToJSON,
} from '../models/index';

export interface MoveDatasetRequest {
    moveDatasetInput: MoveDatasetInput;
}

/**
 * 
 */
export class ToolsApi extends runtime.BaseAPI {

    /**
     * Moves a dataset to a different project. The underlying S3 data is not transferred and will need to be done manually. It is expected the user will also transfer all datasets in the lineage.
     * Move a dataset to a different project
     */
    async moveDatasetRaw(requestParameters: MoveDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveDatasetResponse>> {
        if (requestParameters.moveDatasetInput === null || requestParameters.moveDatasetInput === undefined) {
            throw new runtime.RequiredError('moveDatasetInput','Required parameter requestParameters.moveDatasetInput was null or undefined when calling moveDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tools/move-dataset`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDatasetInputToJSON(requestParameters.moveDatasetInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveDatasetResponseFromJSON(jsonValue));
    }

    /**
     * Moves a dataset to a different project. The underlying S3 data is not transferred and will need to be done manually. It is expected the user will also transfer all datasets in the lineage.
     * Move a dataset to a different project
     */
    async moveDataset(requestParameters: MoveDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveDatasetResponse> {
        const response = await this.moveDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
