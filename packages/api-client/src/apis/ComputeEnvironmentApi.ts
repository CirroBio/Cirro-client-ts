/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentDetail,
  AgentInput,
  ComputeEnvironmentConfiguration,
  ComputeEnvironmentConfigurationInput,
  CreateResponse,
} from '../models/index';
import {
    AgentDetailFromJSON,
    AgentDetailToJSON,
    AgentInputFromJSON,
    AgentInputToJSON,
    ComputeEnvironmentConfigurationFromJSON,
    ComputeEnvironmentConfigurationToJSON,
    ComputeEnvironmentConfigurationInputFromJSON,
    ComputeEnvironmentConfigurationInputToJSON,
    CreateResponseFromJSON,
    CreateResponseToJSON,
} from '../models/index';

export interface CreateAgentRequest {
    agentInput: AgentInput;
}

export interface CreateComputeEnvironmentRequest {
    projectId: string;
    computeEnvironmentConfigurationInput: ComputeEnvironmentConfigurationInput;
}

export interface DeleteAgentRequest {
    agentId: string;
}

export interface DeleteComputeEnvironmentRequest {
    projectId: string;
    computeEnvironmentId: string;
}

export interface GetComputeEnvironmentsRequest {
    projectId: string;
}

export interface UpdateAgentRequest {
    agentId: string;
    agentInput: AgentInput;
}

export interface UpdateComputeEnvironmentRequest {
    projectId: string;
    computeEnvironmentId: string;
    computeEnvironmentConfigurationInput: ComputeEnvironmentConfigurationInput;
}

/**
 * 
 */
export class ComputeEnvironmentApi extends runtime.BaseAPI {

    /**
     * Create a new agent
     * Create agent
     */
    async createAgentRaw(requestParameters: CreateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.agentInput === null || requestParameters.agentInput === undefined) {
            throw new runtime.RequiredError('agentInput','Required parameter requestParameters.agentInput was null or undefined when calling createAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/agents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentInputToJSON(requestParameters.agentInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new agent
     * Create agent
     */
    async createAgent(requestParameters: CreateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new compute environment for a project
     * Create compute environment
     */
    async createComputeEnvironmentRaw(requestParameters: CreateComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createComputeEnvironment.');
        }

        if (requestParameters.computeEnvironmentConfigurationInput === null || requestParameters.computeEnvironmentConfigurationInput === undefined) {
            throw new runtime.RequiredError('computeEnvironmentConfigurationInput','Required parameter requestParameters.computeEnvironmentConfigurationInput was null or undefined when calling createComputeEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/compute-environments`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeEnvironmentConfigurationInputToJSON(requestParameters.computeEnvironmentConfigurationInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new compute environment for a project
     * Create compute environment
     */
    async createComputeEnvironment(requestParameters: CreateComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createComputeEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an agent
     * Delete agent
     */
    async deleteAgentRaw(requestParameters: DeleteAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.agentId === null || requestParameters.agentId === undefined) {
            throw new runtime.RequiredError('agentId','Required parameter requestParameters.agentId was null or undefined when calling deleteAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/agents/{agentId}`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an agent
     * Delete agent
     */
    async deleteAgent(requestParameters: DeleteAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAgentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a compute environment for a project
     * Delete compute environment
     */
    async deleteComputeEnvironmentRaw(requestParameters: DeleteComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteComputeEnvironment.');
        }

        if (requestParameters.computeEnvironmentId === null || requestParameters.computeEnvironmentId === undefined) {
            throw new runtime.RequiredError('computeEnvironmentId','Required parameter requestParameters.computeEnvironmentId was null or undefined when calling deleteComputeEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/compute-environments/{computeEnvironmentId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"computeEnvironmentId"}}`, encodeURIComponent(String(requestParameters.computeEnvironmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a compute environment for a project
     * Delete compute environment
     */
    async deleteComputeEnvironment(requestParameters: DeleteComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteComputeEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of agents
     * Get agents
     */
    async getAgentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentDetail>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/agents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentDetailFromJSON));
    }

    /**
     * Get a list of agents
     * Get agents
     */
    async getAgents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentDetail>> {
        const response = await this.getAgentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of compute environments for a project
     * Get compute environments
     */
    async getComputeEnvironmentsRaw(requestParameters: GetComputeEnvironmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComputeEnvironmentConfiguration>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getComputeEnvironments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/compute-environments`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComputeEnvironmentConfigurationFromJSON));
    }

    /**
     * Get a list of compute environments for a project
     * Get compute environments
     */
    async getComputeEnvironments(requestParameters: GetComputeEnvironmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComputeEnvironmentConfiguration>> {
        const response = await this.getComputeEnvironmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an agent
     * Update agent
     */
    async updateAgentRaw(requestParameters: UpdateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.agentId === null || requestParameters.agentId === undefined) {
            throw new runtime.RequiredError('agentId','Required parameter requestParameters.agentId was null or undefined when calling updateAgent.');
        }

        if (requestParameters.agentInput === null || requestParameters.agentInput === undefined) {
            throw new runtime.RequiredError('agentInput','Required parameter requestParameters.agentInput was null or undefined when calling updateAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/agents/{agentId}`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentInputToJSON(requestParameters.agentInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an agent
     * Update agent
     */
    async updateAgent(requestParameters: UpdateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAgentRaw(requestParameters, initOverrides);
    }

    /**
     * Update a compute environment for a project
     * Update compute environment
     */
    async updateComputeEnvironmentRaw(requestParameters: UpdateComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateComputeEnvironment.');
        }

        if (requestParameters.computeEnvironmentId === null || requestParameters.computeEnvironmentId === undefined) {
            throw new runtime.RequiredError('computeEnvironmentId','Required parameter requestParameters.computeEnvironmentId was null or undefined when calling updateComputeEnvironment.');
        }

        if (requestParameters.computeEnvironmentConfigurationInput === null || requestParameters.computeEnvironmentConfigurationInput === undefined) {
            throw new runtime.RequiredError('computeEnvironmentConfigurationInput','Required parameter requestParameters.computeEnvironmentConfigurationInput was null or undefined when calling updateComputeEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/compute-environments/{computeEnvironmentId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"computeEnvironmentId"}}`, encodeURIComponent(String(requestParameters.computeEnvironmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeEnvironmentConfigurationInputToJSON(requestParameters.computeEnvironmentConfigurationInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a compute environment for a project
     * Update compute environment
     */
    async updateComputeEnvironment(requestParameters: UpdateComputeEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateComputeEnvironmentRaw(requestParameters, initOverrides);
    }

}
