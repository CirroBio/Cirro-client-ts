/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormSchema,
  PaginatedResponseSampleDto,
  Sample,
  SampleRequest,
} from '../models/index';
import {
    FormSchemaFromJSON,
    FormSchemaToJSON,
    PaginatedResponseSampleDtoFromJSON,
    PaginatedResponseSampleDtoToJSON,
    SampleFromJSON,
    SampleToJSON,
    SampleRequestFromJSON,
    SampleRequestToJSON,
} from '../models/index';

export interface GetProjectSamplesRequest {
    projectId: string;
    limit?: number;
    nextToken?: string;
}

export interface GetProjectSchemaRequest {
    projectId: string;
}

export interface UpdateSampleRequest {
    projectId: string;
    sampleId: string;
    sampleRequest: SampleRequest;
}

/**
 * 
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     * Get project samples
     */
    async getProjectSamplesRaw(requestParameters: GetProjectSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseSampleDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectSamples.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/samples`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseSampleDtoFromJSON(jsonValue));
    }

    /**
     * Get project samples
     */
    async getProjectSamples(requestParameters: GetProjectSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseSampleDto> {
        const response = await this.getProjectSamplesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project metadata schema
     */
    async getProjectSchemaRaw(requestParameters: GetProjectSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/schema`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Get project metadata schema
     */
    async getProjectSchema(requestParameters: GetProjectSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormSchema> {
        const response = await this.getProjectSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update sample
     */
    async updateSampleRaw(requestParameters: UpdateSampleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sample>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateSample.');
        }

        if (requestParameters.sampleId === null || requestParameters.sampleId === undefined) {
            throw new runtime.RequiredError('sampleId','Required parameter requestParameters.sampleId was null or undefined when calling updateSample.');
        }

        if (requestParameters.sampleRequest === null || requestParameters.sampleRequest === undefined) {
            throw new runtime.RequiredError('sampleRequest','Required parameter requestParameters.sampleRequest was null or undefined when calling updateSample.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/samples/{sampleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"sampleId"}}`, encodeURIComponent(String(requestParameters.sampleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SampleRequestToJSON(requestParameters.sampleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleFromJSON(jsonValue));
    }

    /**
     * Update sample
     */
    async updateSample(requestParameters: UpdateSampleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sample> {
        const response = await this.updateSampleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
