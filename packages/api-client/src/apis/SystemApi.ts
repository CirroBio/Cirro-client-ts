/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceConnection,
  SystemInfoResponse,
} from '../models/index';
import {
    ServiceConnectionFromJSON,
    ServiceConnectionToJSON,
    SystemInfoResponseFromJSON,
    SystemInfoResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * List available service connections
     * Get service connections
     */
    async getServiceConnectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceConnection>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceConnectionFromJSON));
    }

    /**
     * List available service connections
     * Get service connections
     */
    async getServiceConnections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceConnection>> {
        const response = await this.getServiceConnectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get system info
     */
    async infoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get system info
     */
    async info(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemInfoResponse> {
        const response = await this.infoRaw(initOverrides);
        return await response.value();
    }

}
