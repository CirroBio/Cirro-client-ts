/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditEvent,
} from '../models/index';
import {
    AuditEventFromJSON,
    AuditEventToJSON,
} from '../models/index';

export interface GetEventRequest {
    auditEventId: string;
}

export interface ListEventsRequest {
    username: string;
}

/**
 * 
 */
export class AuditApi extends runtime.BaseAPI {

    /**
     * Get audit event detailed information
     * Get audit event
     */
    async getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditEvent>> {
        if (requestParameters.auditEventId === null || requestParameters.auditEventId === undefined) {
            throw new runtime.RequiredError('auditEventId','Required parameter requestParameters.auditEventId was null or undefined when calling getEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/audit-events/{auditEventId}`.replace(`{${"auditEventId"}}`, encodeURIComponent(String(requestParameters.auditEventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditEventFromJSON(jsonValue));
    }

    /**
     * Get audit event detailed information
     * Get audit event
     */
    async getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditEvent> {
        const response = await this.getEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of audit events
     * List audit events
     */
    async listEventsRaw(requestParameters: ListEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuditEvent>>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling listEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/audit-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditEventFromJSON));
    }

    /**
     * Gets a list of audit events
     * List audit events
     */
    async listEvents(requestParameters: ListEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuditEvent>> {
        const response = await this.listEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
