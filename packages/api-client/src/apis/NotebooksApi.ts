/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNotebookInstanceRequest,
  CreateResponse,
  NotebookInstance,
  OpenNotebookInstanceResponse,
} from '../models/index';
import {
    CreateNotebookInstanceRequestFromJSON,
    CreateNotebookInstanceRequestToJSON,
    CreateResponseFromJSON,
    CreateResponseToJSON,
    NotebookInstanceFromJSON,
    NotebookInstanceToJSON,
    OpenNotebookInstanceResponseFromJSON,
    OpenNotebookInstanceResponseToJSON,
} from '../models/index';

export interface CreateNotebookInstanceOperationRequest {
    projectId: string;
    createNotebookInstanceRequest: CreateNotebookInstanceRequest;
}

export interface DeleteNotebookInstanceRequest {
    notebookInstanceId: string;
    projectId: string;
}

export interface GenerateNotebookInstanceUrlRequest {
    notebookInstanceId: string;
    projectId: string;
}

export interface GetNotebookInstanceStatusRequest {
    notebookInstanceId: string;
    projectId: string;
}

export interface GetNotebookInstancesRequest {
    projectId: string;
}

export interface StopNotebookInstanceRequest {
    notebookInstanceId: string;
    projectId: string;
}

/**
 * 
 */
export class NotebooksApi extends runtime.BaseAPI {

    /**
     */
    async createNotebookInstanceRaw(requestParameters: CreateNotebookInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createNotebookInstance.');
        }

        if (requestParameters.createNotebookInstanceRequest === null || requestParameters.createNotebookInstanceRequest === undefined) {
            throw new runtime.RequiredError('createNotebookInstanceRequest','Required parameter requestParameters.createNotebookInstanceRequest was null or undefined when calling createNotebookInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNotebookInstanceRequestToJSON(requestParameters.createNotebookInstanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async createNotebookInstance(requestParameters: CreateNotebookInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createNotebookInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteNotebookInstanceRaw(requestParameters: DeleteNotebookInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notebookInstanceId === null || requestParameters.notebookInstanceId === undefined) {
            throw new runtime.RequiredError('notebookInstanceId','Required parameter requestParameters.notebookInstanceId was null or undefined when calling deleteNotebookInstance.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteNotebookInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances/{notebookInstanceId}`.replace(`{${"notebookInstanceId"}}`, encodeURIComponent(String(requestParameters.notebookInstanceId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteNotebookInstance(requestParameters: DeleteNotebookInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteNotebookInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async generateNotebookInstanceUrlRaw(requestParameters: GenerateNotebookInstanceUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNotebookInstanceResponse>> {
        if (requestParameters.notebookInstanceId === null || requestParameters.notebookInstanceId === undefined) {
            throw new runtime.RequiredError('notebookInstanceId','Required parameter requestParameters.notebookInstanceId was null or undefined when calling generateNotebookInstanceUrl.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling generateNotebookInstanceUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances/{notebookInstanceId}:generate-url`.replace(`{${"notebookInstanceId"}}`, encodeURIComponent(String(requestParameters.notebookInstanceId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNotebookInstanceResponseFromJSON(jsonValue));
    }

    /**
     */
    async generateNotebookInstanceUrl(requestParameters: GenerateNotebookInstanceUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNotebookInstanceResponse> {
        const response = await this.generateNotebookInstanceUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNotebookInstanceStatusRaw(requestParameters: GetNotebookInstanceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.notebookInstanceId === null || requestParameters.notebookInstanceId === undefined) {
            throw new runtime.RequiredError('notebookInstanceId','Required parameter requestParameters.notebookInstanceId was null or undefined when calling getNotebookInstanceStatus.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getNotebookInstanceStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances/{notebookInstanceId}:status`.replace(`{${"notebookInstanceId"}}`, encodeURIComponent(String(requestParameters.notebookInstanceId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getNotebookInstanceStatus(requestParameters: GetNotebookInstanceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getNotebookInstanceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNotebookInstancesRaw(requestParameters: GetNotebookInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotebookInstance>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getNotebookInstances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotebookInstanceFromJSON));
    }

    /**
     */
    async getNotebookInstances(requestParameters: GetNotebookInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotebookInstance>> {
        const response = await this.getNotebookInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stopNotebookInstanceRaw(requestParameters: StopNotebookInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notebookInstanceId === null || requestParameters.notebookInstanceId === undefined) {
            throw new runtime.RequiredError('notebookInstanceId','Required parameter requestParameters.notebookInstanceId was null or undefined when calling stopNotebookInstance.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling stopNotebookInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/notebook-instances/{notebookInstanceId}:stop`.replace(`{${"notebookInstanceId"}}`, encodeURIComponent(String(requestParameters.notebookInstanceId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stopNotebookInstance(requestParameters: StopNotebookInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopNotebookInstanceRaw(requestParameters, initOverrides);
    }

}
