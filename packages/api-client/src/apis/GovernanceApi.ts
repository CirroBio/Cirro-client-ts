/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClassificationInput,
  ContactInput,
  FulfillmentResponse,
  GovernanceClassification,
  GovernanceContact,
  GovernanceFileInput,
  GovernanceRequirement,
  ProjectRequirement,
  RequirementFulfillmentInput,
  RequirementInput,
} from '../models/index';
import {
    ClassificationInputFromJSON,
    ClassificationInputToJSON,
    ContactInputFromJSON,
    ContactInputToJSON,
    FulfillmentResponseFromJSON,
    FulfillmentResponseToJSON,
    GovernanceClassificationFromJSON,
    GovernanceClassificationToJSON,
    GovernanceContactFromJSON,
    GovernanceContactToJSON,
    GovernanceFileInputFromJSON,
    GovernanceFileInputToJSON,
    GovernanceRequirementFromJSON,
    GovernanceRequirementToJSON,
    ProjectRequirementFromJSON,
    ProjectRequirementToJSON,
    RequirementFulfillmentInputFromJSON,
    RequirementFulfillmentInputToJSON,
    RequirementInputFromJSON,
    RequirementInputToJSON,
} from '../models/index';

export interface CreateClassificationRequest {
    classificationInput: ClassificationInput;
}

export interface CreateContactRequest {
    contactInput: ContactInput;
}

export interface CreateRequirementRequest {
    requirementInput: RequirementInput;
}

export interface DeleteClassificationRequest {
    classificationId: string;
}

export interface DeleteContactRequest {
    contactId: string;
}

export interface DeleteRequirementRequest {
    requirementId: string;
}

export interface FulfillRequirementRequest {
    projectId: string;
    requirementId: string;
    requirementFulfillmentInput: RequirementFulfillmentInput;
}

export interface GetClassificationRequest {
    classificationId: string;
}

export interface GetContactRequest {
    contactId: string;
}

export interface GetRequirementRequest {
    requirementId: string;
}

export interface GetRequirementsRequest {
    projectId?: string;
}

export interface GetRequirementsByProjectRequest {
    projectId: string;
}

export interface UpdateClassificationRequest {
    classificationId: string;
    classificationInput: ClassificationInput;
}

export interface UpdateContactRequest {
    contactId: string;
    contactInput: ContactInput;
}

export interface UpdateRequirementRequest {
    requirementId: string;
    requirementInput: RequirementInput;
}

export interface UpdateRequirementFileForProjectRequest {
    requirementId: string;
    projectId: string;
    governanceFileInput: GovernanceFileInput;
}

/**
 * 
 */
export class GovernanceApi extends runtime.BaseAPI {

    /**
     * Creates a classification
     * Create classification
     */
    async createClassificationRaw(requestParameters: CreateClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceClassification>> {
        if (requestParameters.classificationInput === null || requestParameters.classificationInput === undefined) {
            throw new runtime.RequiredError('classificationInput','Required parameter requestParameters.classificationInput was null or undefined when calling createClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/classifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClassificationInputToJSON(requestParameters.classificationInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceClassificationFromJSON(jsonValue));
    }

    /**
     * Creates a classification
     * Create classification
     */
    async createClassification(requestParameters: CreateClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceClassification> {
        const response = await this.createClassificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a contact
     * Create contact
     */
    async createContactRaw(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceContact>> {
        if (requestParameters.contactInput === null || requestParameters.contactInput === undefined) {
            throw new runtime.RequiredError('contactInput','Required parameter requestParameters.contactInput was null or undefined when calling createContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInputToJSON(requestParameters.contactInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceContactFromJSON(jsonValue));
    }

    /**
     * Creates a contact
     * Create contact
     */
    async createContact(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceContact> {
        const response = await this.createContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a requirement
     * Create requirement
     */
    async createRequirementRaw(requestParameters: CreateRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceRequirement>> {
        if (requestParameters.requirementInput === null || requestParameters.requirementInput === undefined) {
            throw new runtime.RequiredError('requirementInput','Required parameter requestParameters.requirementInput was null or undefined when calling createRequirement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequirementInputToJSON(requestParameters.requirementInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceRequirementFromJSON(jsonValue));
    }

    /**
     * Creates a requirement
     * Create requirement
     */
    async createRequirement(requestParameters: CreateRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceRequirement> {
        const response = await this.createRequirementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the classification, and removes it from all projects.
     * Delete a classification
     */
    async deleteClassificationRaw(requestParameters: DeleteClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.classificationId === null || requestParameters.classificationId === undefined) {
            throw new runtime.RequiredError('classificationId','Required parameter requestParameters.classificationId was null or undefined when calling deleteClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/classifications/{classificationId}`.replace(`{${"classificationId"}}`, encodeURIComponent(String(requestParameters.classificationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the classification, and removes it from all projects.
     * Delete a classification
     */
    async deleteClassification(requestParameters: DeleteClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClassificationRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the contact, and removes it from all governance requirements.
     * Delete a contact
     */
    async deleteContactRaw(requestParameters: DeleteContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling deleteContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the contact, and removes it from all governance requirements.
     * Delete a contact
     */
    async deleteContact(requestParameters: DeleteContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContactRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the requirement, and removes it from all governance fulfillments and classifications.
     * Delete a requirement
     */
    async deleteRequirementRaw(requestParameters: DeleteRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling deleteRequirement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements/{requirementId}`.replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the requirement, and removes it from all governance fulfillments and classifications.
     * Delete a requirement
     */
    async deleteRequirement(requestParameters: DeleteRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRequirementRaw(requestParameters, initOverrides);
    }

    /**
     * Saves a record of the fulfillment of a governance requirement
     * Fulfill a project\'s requirement
     */
    async fulfillRequirementRaw(requestParameters: FulfillRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling fulfillRequirement.');
        }

        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling fulfillRequirement.');
        }

        if (requestParameters.requirementFulfillmentInput === null || requestParameters.requirementFulfillmentInput === undefined) {
            throw new runtime.RequiredError('requirementFulfillmentInput','Required parameter requestParameters.requirementFulfillmentInput was null or undefined when calling fulfillRequirement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/projects/{projectId}/requirements/{requirementId}:fulfill`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequirementFulfillmentInputToJSON(requestParameters.requirementFulfillmentInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FulfillmentResponseFromJSON(jsonValue));
    }

    /**
     * Saves a record of the fulfillment of a governance requirement
     * Fulfill a project\'s requirement
     */
    async fulfillRequirement(requestParameters: FulfillRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentResponse> {
        const response = await this.fulfillRequirementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a data classification
     * Get a classification
     */
    async getClassificationRaw(requestParameters: GetClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceClassification>> {
        if (requestParameters.classificationId === null || requestParameters.classificationId === undefined) {
            throw new runtime.RequiredError('classificationId','Required parameter requestParameters.classificationId was null or undefined when calling getClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/classifications/{classificationId}`.replace(`{${"classificationId"}}`, encodeURIComponent(String(requestParameters.classificationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceClassificationFromJSON(jsonValue));
    }

    /**
     * Retrieve a data classification
     * Get a classification
     */
    async getClassification(requestParameters: GetClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceClassification> {
        const response = await this.getClassificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of data classifications
     * Get classifications
     */
    async getClassificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GovernanceClassification>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/classifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GovernanceClassificationFromJSON));
    }

    /**
     * Retrieve a list of data classifications
     * Get classifications
     */
    async getClassifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GovernanceClassification>> {
        const response = await this.getClassificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a governance contact
     * Get a contact
     */
    async getContactRaw(requestParameters: GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceContact>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling getContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceContactFromJSON(jsonValue));
    }

    /**
     * Retrieve a governance contact
     * Get a contact
     */
    async getContact(requestParameters: GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceContact> {
        const response = await this.getContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of governance contacts
     * Get contacts
     */
    async getContactsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GovernanceContact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GovernanceContactFromJSON));
    }

    /**
     * Retrieve a list of governance contacts
     * Get contacts
     */
    async getContacts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GovernanceContact>> {
        const response = await this.getContactsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a governance requirement
     * Get a requirement
     */
    async getRequirementRaw(requestParameters: GetRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceRequirement>> {
        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling getRequirement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements/{requirementId}`.replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceRequirementFromJSON(jsonValue));
    }

    /**
     * Retrieve a governance requirement
     * Get a requirement
     */
    async getRequirement(requestParameters: GetRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceRequirement> {
        const response = await this.getRequirementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of governance requirements
     * Get requirements
     */
    async getRequirementsRaw(requestParameters: GetRequirementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GovernanceRequirement>>> {
        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GovernanceRequirementFromJSON));
    }

    /**
     * Retrieve a list of governance requirements
     * Get requirements
     */
    async getRequirements(requestParameters: GetRequirementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GovernanceRequirement>> {
        const response = await this.getRequirementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve governance requirements for a project with fulfillment information for the current user
     * Get project requirements
     */
    async getRequirementsByProjectRaw(requestParameters: GetRequirementsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectRequirement>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getRequirementsByProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/projects/{projectId}/requirements`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectRequirementFromJSON));
    }

    /**
     * Retrieve governance requirements for a project with fulfillment information for the current user
     * Get project requirements
     */
    async getRequirementsByProject(requestParameters: GetRequirementsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectRequirement>> {
        const response = await this.getRequirementsByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a classification
     * Update classification
     */
    async updateClassificationRaw(requestParameters: UpdateClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceClassification>> {
        if (requestParameters.classificationId === null || requestParameters.classificationId === undefined) {
            throw new runtime.RequiredError('classificationId','Required parameter requestParameters.classificationId was null or undefined when calling updateClassification.');
        }

        if (requestParameters.classificationInput === null || requestParameters.classificationInput === undefined) {
            throw new runtime.RequiredError('classificationInput','Required parameter requestParameters.classificationInput was null or undefined when calling updateClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/classifications/{classificationId}`.replace(`{${"classificationId"}}`, encodeURIComponent(String(requestParameters.classificationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClassificationInputToJSON(requestParameters.classificationInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceClassificationFromJSON(jsonValue));
    }

    /**
     * Updates a classification
     * Update classification
     */
    async updateClassification(requestParameters: UpdateClassificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceClassification> {
        const response = await this.updateClassificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a contact
     * Update contact
     */
    async updateContactRaw(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceContact>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling updateContact.');
        }

        if (requestParameters.contactInput === null || requestParameters.contactInput === undefined) {
            throw new runtime.RequiredError('contactInput','Required parameter requestParameters.contactInput was null or undefined when calling updateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInputToJSON(requestParameters.contactInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceContactFromJSON(jsonValue));
    }

    /**
     * Updates a contact
     * Update contact
     */
    async updateContact(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceContact> {
        const response = await this.updateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a requirement
     * Update requirement
     */
    async updateRequirementRaw(requestParameters: UpdateRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GovernanceRequirement>> {
        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling updateRequirement.');
        }

        if (requestParameters.requirementInput === null || requestParameters.requirementInput === undefined) {
            throw new runtime.RequiredError('requirementInput','Required parameter requestParameters.requirementInput was null or undefined when calling updateRequirement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements/{requirementId}`.replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequirementInputToJSON(requestParameters.requirementInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GovernanceRequirementFromJSON(jsonValue));
    }

    /**
     * Updates a requirement
     * Update requirement
     */
    async updateRequirement(requestParameters: UpdateRequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GovernanceRequirement> {
        const response = await this.updateRequirementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the project-specific file for a requirement
     * Update the project file for a requirement
     */
    async updateRequirementFileForProjectRaw(requestParameters: UpdateRequirementFileForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling updateRequirementFileForProject.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateRequirementFileForProject.');
        }

        if (requestParameters.governanceFileInput === null || requestParameters.governanceFileInput === undefined) {
            throw new runtime.RequiredError('governanceFileInput','Required parameter requestParameters.governanceFileInput was null or undefined when calling updateRequirementFileForProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/governance/requirements/{requirementId}/projects/{projectId}`.replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))).replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GovernanceFileInputToJSON(requestParameters.governanceFileInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the project-specific file for a requirement
     * Update the project file for a requirement
     */
    async updateRequirementFileForProject(requestParameters: UpdateRequirementFileForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRequirementFileForProjectRaw(requestParameters, initOverrides);
    }

}
