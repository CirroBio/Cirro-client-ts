/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateResponse,
  Dashboard,
  DashboardRequest,
} from '../models/index';
import {
    CreateResponseFromJSON,
    CreateResponseToJSON,
    DashboardFromJSON,
    DashboardToJSON,
    DashboardRequestFromJSON,
    DashboardRequestToJSON,
} from '../models/index';

export interface CreateDashboardRequest {
    projectId: string;
    dashboardRequest: DashboardRequest;
}

export interface DeleteDashboardRequest {
    projectId: string;
    dashboardId: string;
}

export interface GetDashboardRequest {
    projectId: string;
    dashboardId: string;
}

export interface GetDashboardsRequest {
    projectId: string;
}

export interface UpdateDashboardRequest {
    projectId: string;
    dashboardId: string;
    dashboardRequest: DashboardRequest;
}

/**
 * 
 */
export class DashboardsApi extends runtime.BaseAPI {

    /**
     * Creates a dashboard
     * Create dashboard
     */
    async createDashboardRaw(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createDashboard.');
        }

        if (requestParameters.dashboardRequest === null || requestParameters.dashboardRequest === undefined) {
            throw new runtime.RequiredError('dashboardRequest','Required parameter requestParameters.dashboardRequest was null or undefined when calling createDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/dashboards`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DashboardRequestToJSON(requestParameters.dashboardRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a dashboard
     * Create dashboard
     */
    async createDashboard(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a dashboard
     * Delete dashboard
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteDashboard.');
        }

        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling deleteDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/dashboards/{dashboardId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardFromJSON(jsonValue));
    }

    /**
     * Deletes a dashboard
     * Delete dashboard
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.deleteDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a dashboard
     * Get dashboard
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getDashboard.');
        }

        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/dashboards/{dashboardId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardFromJSON(jsonValue));
    }

    /**
     * Retrieves a dashboard
     * Get dashboard
     */
    async getDashboard(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of dashboards for a given project
     * List dashboards
     */
    async getDashboardsRaw(requestParameters: GetDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dashboard>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getDashboards.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/dashboards`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardFromJSON));
    }

    /**
     * Retrieves a list of dashboards for a given project
     * List dashboards
     */
    async getDashboards(requestParameters: GetDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dashboard>> {
        const response = await this.getDashboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a dashboard
     * Update dashboard
     */
    async updateDashboardRaw(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.dashboardRequest === null || requestParameters.dashboardRequest === undefined) {
            throw new runtime.RequiredError('dashboardRequest','Required parameter requestParameters.dashboardRequest was null or undefined when calling updateDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/dashboards/{dashboardId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DashboardRequestToJSON(requestParameters.dashboardRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardFromJSON(jsonValue));
    }

    /**
     * Updates a dashboard
     * Update dashboard
     */
    async updateDashboard(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.updateDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
