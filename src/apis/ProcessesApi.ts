/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormSchema,
  Process,
} from '../models/index';
import {
    FormSchemaFromJSON,
    FormSchemaToJSON,
    ProcessFromJSON,
    ProcessToJSON,
} from '../models/index';

export interface GetProcessFormRequest {
    processId: string;
}

/**
 * 
 */
export class ProcessesApi extends runtime.BaseAPI {

    /**
     * Retrieves the input parameters for a process
     * Get Process Parameters
     */
    async getProcessFormRaw(requestParameters: GetProcessFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.processId === null || requestParameters.processId === undefined) {
            throw new runtime.RequiredError('processId','Required parameter requestParameters.processId was null or undefined when calling getProcessForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/processes/{processId}/parameters`.replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Retrieves the input parameters for a process
     * Get Process Parameters
     */
    async getProcessForm(requestParameters: GetProcessFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormSchema> {
        const response = await this.getProcessFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of available processes
     * List Processes
     */
    async getProcessesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Process>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/processes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessFromJSON));
    }

    /**
     * Retrieves a list of available processes
     * List Processes
     */
    async getProcesses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Process>> {
        const response = await this.getProcessesRaw(initOverrides);
        return await response.value();
    }

}
