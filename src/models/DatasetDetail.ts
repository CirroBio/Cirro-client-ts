/* tslint:disable */
/* eslint-disable */
/**
 * Cirro Data
 * Cirro Data Platform service API
 *
 * The version of the OpenAPI document: latest
 * Contact: support@cirro.bio
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * 
 * @export
 * @interface DatasetDetail
 */
export interface DatasetDetail {
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    desc: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    s3: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    processId: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    processName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DatasetDetail
     */
    sourceDatasets: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    status: string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof DatasetDetail
     */
    tags: Array<Tag>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DatasetDetail
     */
    params: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DatasetDetail
     */
    info: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof DatasetDetail
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the DatasetDetail interface.
 */
export function instanceOfDatasetDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "desc" in value;
    isInstance = isInstance && "s3" in value;
    isInstance = isInstance && "processId" in value;
    isInstance = isInstance && "processName" in value;
    isInstance = isInstance && "sourceDatasets" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "info" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function DatasetDetailFromJSON(json: any): DatasetDetail {
    return DatasetDetailFromJSONTyped(json, false);
}

export function DatasetDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatasetDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'desc': json['desc'],
        's3': json['s3'],
        'processId': json['processId'],
        'processName': json['processName'],
        'sourceDatasets': json['sourceDatasets'],
        'status': json['status'],
        'tags': ((json['tags'] as Array<any>).map(TagFromJSON)),
        'params': json['params'],
        'info': json['info'],
        'createdBy': json['createdBy'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function DatasetDetailToJSON(value?: DatasetDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'desc': value.desc,
        's3': value.s3,
        'processId': value.processId,
        'processName': value.processName,
        'sourceDatasets': value.sourceDatasets,
        'status': value.status,
        'tags': ((value.tags as Array<any>).map(TagToJSON)),
        'params': value.params,
        'info': value.info,
        'createdBy': value.createdBy,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

